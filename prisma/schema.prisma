// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    authoredTasks Task[]    @relation("TaskAuthor")
    assignedTasks Task[]    @relation("TaskAssignee")
    teams         Team[]
}

// New models for projects and teams
model Team {
    id                   Int    @id @default(autoincrement())
    teamName             String
    productOwnerUserId   String?
    projectManagerUserId String?
    users               User[]
    projects            ProjectTeam[]
}

model Project {
    id          Int       @id @default(autoincrement())
    name        String
    description String?
    startDate   DateTime?
    endDate     DateTime?
    tasks       Task[]
    teams       ProjectTeam[]
}


model ProjectTeam {
    id        Int     @id @default(autoincrement())
    teamId    Int
    projectId Int
    team      Team    @relation(fields: [teamId], references: [id])
    project   Project @relation(fields: [projectId], references: [id])
}

model Task {
    id             Int       @id @default(autoincrement())
    title          String
    description    String?
    status         String?
    priority       String?
    tags           String?
    startDate      DateTime?
    dueDate        DateTime?
    points         Int?
    projectId      Int
    authorUserId   String
    assignedUserId String?

    project   Project  @relation(fields: [projectId], references: [id])
    author    User     @relation("TaskAuthor", fields: [authorUserId], references: [id])
    assignee  User?    @relation("TaskAssignee", fields: [assignedUserId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
